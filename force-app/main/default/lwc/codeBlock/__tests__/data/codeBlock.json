"import { InvocationEvent, Context, Logger, Org } from \"sf-fx-sdk-nodejs\";\n\n/**\n * Returns the Salesforce Org information attached to the context.\n *\n * The exported method is the entry point for your code when the function is invoked.\n *\n * Following parameters are pre-configured and provided to your function on execution:\n * @param event: represents the data associated with the occurrence of an event, and\n *                 supporting metadata about the source of that occurrence.\n * @param context: represents the connection to Functions and your Salesforce org.\n * @param logger: logging handler used to capture application logs and trace specifically\n *                 to a given execution of a function.\n */\nexport default async function execute(\n  event: InvocationEvent<any>,\n  context: Context,\n  logger: Logger\n): Promise<OrgInfo> {\n  logger.info(\n    `Invoking orginfots Function with payload ${JSON.stringify(\n      event.data || {}\n    )}`\n  );\n\n  // Check if org is null or undefined\n  if (context.org == null) {\n    throw new Error(\"Function isn't bind to any organization\");\n  }\n\n  // Extract Org info metadata into its own object and return it\n  const orgInfo: OrgInfo = new OrgInfo(context.org);\n  return orgInfo;\n}\n\n// OrgInfo represents Org's metadata\nexport class OrgInfo {\n  apiVersion: string;\n  baseUrl: string;\n  domainUrl: string;\n  id: string;\n  user: any;\n\n  constructor(org: Org) {\n    this.apiVersion = org.apiVersion;\n    this.baseUrl = org.baseUrl;\n    this.domainUrl = org.domainUrl;\n    this.id = org.id;\n    this.user = org.user;\n  }\n}\n"